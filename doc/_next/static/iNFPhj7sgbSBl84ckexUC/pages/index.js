(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"/EDR":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t("23aj")}])},"23aj":function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),s=t("JXIB"),r=a.createElement;n.default=function(){var e=s.default.processSync("---\ntitle: Pure functions\n---\n\n## Summary\n\nIn this chapter we will begin our journey by exploring functions. We will look\nat a piece of code that violates the principle of immutability and explore the\nimplications, and refactor it using pure functions. If you're here to learn\nabout `fp-ts` and are already familiar with the idea of pure functions, you can\nsafely skip this chapter.\n\n## Prelude: Mondays\n\nIt's 10AM. The window in the developer room is fogged-up from dozens of steamy cups\nof coffee. Barely awake, you wonder if you could have called in sick today.\nThere is still time, of course, the others wouldn't snitch, you could still make it. You\ncould creep back under those comforting sheets. The week should really start on\nTuesday, you think. But, regrettably, it is too late. Bright-eyed Bob blows\ninto the room. All confident and motivated he proclaims:\n\n\"Stand-up!\"\n\nTwelve developers sighs sound in harmony. You distrust Mondays.\n\n\"So, we're building two new features today.\"\n\nBob takes a sip from his mug, which boldly lies \"getting shit done\".\n\n\"We are?\", Barbara inquires. \"I didn't see any new tickets.\"\n\n\"Well, apparently sales sold it in December. And the client needs it by Friday.\"\n\n\"Ah, well, that's doable I guess.\" Barbara takes an ironic sip.\n\n\"Yeah, no, last Friday. They needed it by last Friday.\"\n\n\"But that is in the past.\" Jim helpfully interjects.\n\n\"Shit happens.\" Bob raises his hands in defense. You are pretty sure he owns\nanother coffee cup with the words \"shit happens\" imprinted. \"Sorry guys, you\nneed to get on this right now. Jim. You need to get onto the side bar ...\"\n\nYou voice another sigh. Why does this always happen on Monday? You lean on the\nwindow frame and lose yourself in painting little lambdas on the misty glass.\nYou recall the meeting where your kin swore a blood oath over the _surprisingly_\nthin agile manifesto. \"Never again\", you voices echoed through halls of empty\ncubicles. A war cry of misunderstood craftspeople. Where are those blessed days?\nWhen was this? It must have been in the fading days of a past summer.\n\nOr was it last Friday? Actually, yes, you think it was last Friday.\n\n\"Tom.\" Ah. That's you. Better listen. \"You need to do the admin section. The\njunior wants to build the view, but could you create the model? It should\ndisplay ...  um ...\" Bob glances on a stained napkin in his hand.\n\"Registration date in ... long date format. I can't read this. Frank said\nsomething like 'the data is weird'. I don't know what that means. And we need\nto display the user initials. Anyways, I'm sure you'll figure it out! I'm\nconfident you guys can do this, you're all rock stars, after all!\".\n\nAnd with that, Bob marches away. You attempt to take another sip before sitting\ndown, lamenting the crushed dream of a slow Monday. Alas, the cup is empty. You\nwonder if you could configure the corporate calendar so that weeks start on\nTuesdays.\n\n## Something something user\n\nAlright. Let's have a look at the data. It's supposed to be \"weird\", after all.\n\n```json5\n[\n    {firstName: 'Barbara', lastName: 'Selling', registered: '01.03.2017'},\n    {firstName: 'John', lastName: 'Smith', registered: '12.24.2019'},\n    {firstName: 'Frank', lastName: 'Helmsworth', registered: '05.11.2011'},\n    {firstName: 'Anna', lastName: 'Freeman', registered: '07.09.2003'},\n    {firstName: 'Damian', lastName: 'Sipes', registered: '12.12.2001'},\n    {firstName: 'Mara', lastName: 'Homenick', registered: '08.14.2007'},\n];\n```\n\nAh, glancing at the `registered` field, we can see whats \"weird\": it was stored\nas a US-formatted string, `MONTH.DAY.YEAR`, or `MM.DD.YYYY`, if you are\nfamiliar with [date field notation](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\nThe view needs it in a different format though, something like `Wednesday, 9 July 2003`,\nor `EEEE, d MMMM YYYY`. Before we go about and create our view\nmodel, we'll capture the _structure_ of our data in a type.\n\n```typescript\ntype User {\n    firstName: string;\n    lastName: string;\n    registered: string;\n}\n```\n\nUnlike in classical object-oriented programming (OOP), where designs tend to\ncombine data, behaviour, state and identity, in the style of functional\nprogramming that we will learn as part of this series of tutorials, we clearly\ndistinguish and separate these.\n\nWhen we see a type, we don't mean an \"an instance of a class\", we mean \"a piece\nof data that matches a certain structure\". In our specific case, any data that\nmatches its structure can be considered a `User`. Think one of those toys that\nseem to be sold exclusively to doctors waiting rooms, where children are\nsupposed to match wooden blocks in various shapes (stars, circles, rectangles)\nto their corresponding holes. If the block matches the \"star\" hole, for all\nintents and purposes, its a star.\n\nThis kind of type system is called [structural sub typing](https://www.typescriptlang.org/docs/handbook/type-compatibility.html).\nIt means that the type of a thing is not defined by its place of declaration or\ninternal name (as is the case in nominal typed languages like Java or C#), but\nby its properties. This means that the same piece of data can match many types.\n\nLet's have a look at an example: We can explicitly tell TypeScript which shape\nwe're expecting this object, `damian`, to have. If the structure wouldn't match\nthe type, TypeScript would yell at us.\n\n```typescript\nconst damian: User = {\n    firstName: 'Damian',\n    lastName: 'Sipes',\n    registered: '12.12.2001',\n};\n```\n\nJust to re-iterate, we're not _instantiating_ a `User` here, we're just giving\na type hint. `damian` is just labeled data. Poor Damian. To show the use,\nlet's define a function that explicitly takes a user and returns its\n`firstName`.\n\n```typescript\nconst firstName = (user: User): string => user.firstName;\n\nconsole.log(firstName(damian));\n```\n\n```json5\nDamian\n```\n\nDamians friend Mara doesn't like to be labeled:\n\n```typescript\nconst mara = {\n    firstName: 'Mara',\n    lastName: 'Homenick',\n    registered: '08.14.2007',\n};\n```\n\nTypeScript doesn't care, `mara` matches the shape of a `User`, so the following\ncode is perfectly valid and reasonable:\n\n```typescript\nconsole.log(firstName(mara));\n```\n\n```json5\nMara\n```\n\nYet another friend of theirs, Anna, does not feel like a `User` _at all_,\nthey're off, creating their own type, with black jack and hookers:\n\n```typescript\ntype Person = {\n    firstName: string;\n    lastName: string;\n    registered: string;\n};\n\nconst anna: Person = {\n    firstName: 'Anna',\n    lastName: 'Freeman',\n    registered: '07.09.2003',\n};\n```\n\nBut, if it has a `firstName`, a `lastName` and `registered`, it can be used\nlike a `User`.\n\n```typescript\nconsole.log(firstName(anna));\n```\n\n```json5\nAnna\n```\n\nNoteworthy: Our function doesn't even need to take a `User`, we only really\ncare about the `firstName` property, so we can\n[destructure](https://www.typescriptlang.org/docs/handbook/variable-declarations.html#function-declarations)\nit from the input. Now we've signaled to the caller that we care _even less_\nabout the label of the input, as long as it contains a `firstName` of type\n`string`.\n\n```typescript\nconst firstName = (input: {firstName: string}): string => input.firstName;\nconsole.log(firstName(anna));\n```\n\n```json5\nAnna\n```\n\nHow concrete or general we are in defining our input types is entirely up to us. Each\ncomes with benefits and trade offs we will explore in chapters to come.\n\n## Intermission: Motivational coffee\n\nBy now the opaque window of the developer room has cleared up. You get up, lacking\nthe coffee to motivate yourself to continue. In passing, you hear\nJim muttering \"fuck fuck fuuuck\" under his breath. Barbara seems to hold her\ntemples for dear life, staring in disbelief at some code the junior wrote the\npast week. \"Well, you approved it\", you think to yourself, while said junior\nfuriously researches ways to center divs.\n\nOn your way to the coffee machine you cross ways with Bob, who fixes you with\na gaze that could pierce stone.\n\n\"Making progress?\", he asks, all too casually.\n\n\"Sure. Seems simple enough. Just grabbing a cup before I write some tests, then\nI'm going to write the model.\"\n\n\"Oh, don't worry about tests! We _really_ need this feature. You can test\nafterwards.\"\n\nAs you mentally prepare yourself to attack Bob with a plethora of arguments\nabout professional ethics and maintainability, he grabs your shoulders with\nboth hands, pulls you in, uncomfortably close.\n\n\"Please, man! My boss is breathing down my neck.\", Bob whispers, while\nliterally breathing down your neck. \"You'll get all the time in the world to\ntest this, _after_ we've released. I promise!\", he lies.\n\nSomething in the moment instills a feeling of protectiveness in you. You just\nwant to wrap Bob in a warm blanket and tell him everything is going to be\nalright. Nothing else matters, not sales, not his boss, not these features,\nonly this intimate moment between the two of you.\n\n\"OK.\", you resign. \"But I'll take you up on that promise!\"\n\n\"Thank you!\", a wave of relief washes over Bob, as the familiar cockiness\nvisibly returns, and he [richtet sich auf]. \"So, I can expect your feature by\ntomorrow?\"\n\nYou feel violated, somehow.\n\nAs you wait for the coffee machine to aggressively squirt coffee into your cup,\nyour eyes wander over the floor in irritation. You feel like you have lost\nsomething, on your way from your machine. Your keys? No, you can feel them in\nyour pocket. Your phone? Nah, you left that on your desk. Your integrity? Ah,\nyes, that's it.\n\nYou lost your integrity.\n\nAs you sit down again, ready to directly inject the caffeine into your blood stream, Jim\nerupts:\n\n\"Done. Pushed. Merged.\"\n\n\"Okay, who reviewed?\", you voice your concern.\n\n\"No need, it's working, I checked it!\", he proudly proclaims. \"And Bob said\nit's critical anyways, don't worry about it.\"\n\n\"Bob just told me not to write tests, I just worry about the stability of these\nfeatures.\"\n\n\"He told you not to write what?\", Jim asks absentmindedly.\n\nSounds about right. You attempt to take a sip of coffee while simultaneously\nsighing, that could make things more efficient, you presume, as you pull in\nJims changes.\n\n## Procedural impurity and shared complexity\n\nBefore we write our own model, let's have a look at Jims code.\n\n```git\n type User = {\n     firstName: string;\n     lastName: string;\n     registered: string;\n+    shortName?: string;\n };\n+\n+const usersToSidebar = () => {\n+    for (const user of users) {\n+        // get the year, e.g. '2003'\n+        user.registered = user.registered.slice(6);\n+        // e.g. 'a.smith'\n+        user.shortName = `${user.firstName[0].toLowerCase()}.${user.lastName.toLowerCase()}`;\n+    }\n+};\n+\n+usersToSidebar();\n```\n\nWe didn't really listen in the stand-up, so we don't know precisely what Jims\nfeature is supposed to do, but we can assume from the comments. Let's have a\nlook at the result.\n\n```typescript\nconsole.log(users);\n```\n\n```json5\n[\n  {\n    firstName: 'Barbara',\n    lastName: 'Selling',\n    registered: '2017',\n    shortName: 'b.selling'\n  },\n  {\n    firstName: 'John',\n    lastName: 'Smith',\n    registered: '2019',\n    shortName: 'j.smith'\n  },\n  {\n    firstName: 'Frank',\n    lastName: 'Helmsworth',\n    registered: '2011',\n    shortName: 'f.helmsworth'\n  },\n  {\n    firstName: 'Anna',\n    lastName: 'Freeman',\n    registered: '2003',\n    shortName: 'a.freeman'\n  },\n  {\n    firstName: 'Damian',\n    lastName: 'Sipes',\n    registered: '2001',\n    shortName: 'd.sipes'\n  },\n  {\n    firstName: 'Mara',\n    lastName: 'Homenick',\n    registered: '2007',\n    shortName: 'm.homenick'\n  }\n]\n```\n\nThis may work for Jim, but we have a problem. Jims _procedure_ freely mutates\nthe data (i.e. changes it in place). If we want to derive our own view model\nfrom `users`, we would have to do it _before Jims procedure runs_, otherwise\nhis mutation of specifically the `registered` field makes it impossible to\nderive our own transformation of the field.\n\n> Note: We're intentionally calling `usersToSidebar` a _procedure_. There is a\ncritical difference between a _function_ and a _procedure_. A _function_\nmerely takes values as inputs and returns values as outputs -- all without\naffecting its environment, e.g. by changing inputs in-place. A _procedure_ may\nrun a series of statements, changing its environment, its inputs, having side\neffects other than returning values.\n\nLet's explore this issue a bit more. We'll define our own model-deriving\n_procedure_ and see what happens.\n\nFirst, we extend `User` with an optional `initials` field.\n\n```git\n type User = {\n     firstName: string;\n     lastName: string;\n     registered: string;\n     shortName?: string;\n+    initials?: string;\n };\n```\n\nThen we're adding our own _procedure_ and execute it _after_ Jims.\n\n```typescript\nconst usersToAdmin = () => {\n    for (const user of users) {\n        // resolves to format: EEEE, d MMMM YYYY\n        // e.g. \"Wednesday, 20 June 2019\"\n        user.registered = new Date(user.registered).toLocaleDateString(\n            'en-gb',\n            {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n            },\n        );\n        // e.g. 'AF'\n        user.initials = `${user.firstName[0]}${user.lastName[0]}`;\n    }\n};\n\nusersToSidebar();\nusersToAdminView();\n\nconsole.log(users);\n```\n\n```json5\n[\n  {\n    firstName: 'Barbara',\n    lastName: 'Selling',\n    registered: 'Sunday, 1 January 2017',\n    shortName: 'b.selling',\n    initials: 'BS'\n  },\n  {\n    firstName: 'John',\n    lastName: 'Smith',\n    registered: 'Tuesday, 1 January 2019',\n    shortName: 'j.smith',\n    initials: 'JS'\n  },\n  {\n    firstName: 'Frank',\n    lastName: 'Helmsworth',\n    registered: 'Saturday, 1 January 2011',\n    shortName: 'f.helmsworth',\n    initials: 'FH'\n  },\n  {\n    firstName: 'Anna',\n    lastName: 'Freeman',\n    registered: 'Wednesday, 1 January 2003',\n    shortName: 'a.freeman',\n    initials: 'AF'\n  },\n  {\n    firstName: 'Damian',\n    lastName: 'Sipes',\n    registered: 'Monday, 1 January 2001',\n    shortName: 'd.sipes',\n    initials: 'DS'\n  },\n  {\n    firstName: 'Mara',\n    lastName: 'Homenick',\n    registered: 'Monday, 1 January 2007',\n    shortName: 'm.homenick',\n    initials: 'MH'\n  }\n]\n```\n\nYikes, look at `registered`. Seems they are all fixed on `1 January` because\n_our_ procedure transforms `registered` _after_ it was cut down to just the\nyear by `usersToSidebar`. Let's flip the order of invocation, just to see if\nthat would fix it.\n\n```git\n-usersToSidebar();\n usersToAdminView();\n+usersToSidebar();\n \n console.log(users);\n```\n\n```json5\n[\n  {\n    firstName: 'Barbara',\n    lastName: 'Selling',\n    registered: 'y, 3 January 2017',\n    initials: 'BS',\n    shortName: 'b.selling'\n  },\n  {\n    firstName: 'John',\n    lastName: 'Smith',\n    registered: 'y, 24 December 2019',\n    initials: 'JS',\n    shortName: 'j.smith'\n  },\n  {\n    firstName: 'Frank',\n    lastName: 'Helmsworth',\n    registered: 'day, 11 May 2011',\n    initials: 'FH',\n    shortName: 'f.helmsworth'\n  },\n  {\n    firstName: 'Anna',\n    lastName: 'Freeman',\n    registered: 'day, 9 July 2003',\n    initials: 'AF',\n    shortName: 'a.freeman'\n  },\n  {\n    firstName: 'Damian',\n    lastName: 'Sipes',\n    registered: 'day, 12 December 2001',\n    initials: 'DS',\n    shortName: 'd.sipes'\n  },\n  {\n    firstName: 'Mara',\n    lastName: 'Homenick',\n    registered: 'y, 14 August 2007',\n    initials: 'MH',\n    shortName: 'm.homenick'\n  }\n]\n```\n\nOof. Completely broken. What we're seeing here is the cost of **shared, mutable\nstate**. In our procedures we are reaching into the global scope and changing\ndata in place that is used in other places. We're not preserving the integrity\nof the data. Like a spoiled toddler, we're rampaging through the sweets section\nof the supermarket, trained on that unearned treat, leaving a trail of\ndestruction in our wake.\n\nAnd we've introduced another problem on the type level: because we keep changing\nour original data _in place_, we have to stuff all our new fields into the\noriginal type. `User` would grow in size if we kept adding new fields for\ntotally unrelated views.\n\nWe can imagine that writing an entire application in this style of unmanaged\nstate mutation is an explosion of complexity.\n\nFortunately, we have a simple solution at hand: the function. Specifically, the\n**pure** function.\n\n## Out of the tar pit\n\nYou know what is fundamentally simple? A table:\n\n| key | value |\n|-----|-------|\n| a   | 1     |\n| b   | 99    |\n| c   | 1000  |\n| d   | 99999 |\n\nSo simple and so utterly boring. It's so dull, I hesitate to talk about it. But\nwe need to, in order to make a point. So here we go:\n\n* This table has two columns, a key and a value column.\n* We can look up values via its key.\n* Though the rows may _grow_, at the time of accessing it, all values and their\n  types are known.\n\nKnow what behaves like a table? A pure function!\n\n```typescript\nconst f = (key: 'a' | 'b' | 'c' | 'd') =>\n    key === 'a' ? 1\n    : key === 'b' ? 99\n    : key === 'c' ? 1000\n    : 99999;\n```\n\n* The pure function has two sets of values, input (`'a' | 'b' | 'c' | 'd'`) \n  and output (`1 | 99 | 1000 | 99999`).\n* We can look up output values by passing input values\n* Though we may add values to input and output sets, at the time of accessing\n  it, all values and their types are known.\n\nNoteworthy, a function like this does not share any of the problems of\nprocedures:\n\n* It does not reach into its parent scope, all dependencies of it are declared\n  right there in the parameters.\n* It does not mutate the values it is working with, it effectively only _maps_\n  outputs to inputs.\n* If you run it, you don't need to fear side effects. It just returns values.\n\nIf we can somehow rewrite our problematic procedures so that we get these\nbenefits we have improved the comprehensibility of our program immensely.\nIt is quite simple, actually:\n\n1. Instead of reaching into the parent scope, explicitly define inputs as parameters.\n2. Instead of mutating inputs, treat them as immutable data and create copies.\n3. Instead of storing the outputs in shared state, return them.\n\nLet's do that for `usersToAdmin` and `usersToSidebar`:\n\n```typescript\nconst usersToAdmin = (users: User[]) => {\n    const result = [];\n    for (const user of users) {\n        result.push({\n            ...user,\n            // resolves to format: EEEE, d MMMM YYYY\n            // e.g. \"Wednesday, 20 June 2019\"\n            registered: new Date(user.registered).toLocaleDateString('en-gb', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n            }),\n            // e.g. 'AF'\n            initials: `${user.firstName[0]}${user.lastName[0]}`,\n        });\n    }\n    return result;\n};\n\nconst usersToSidebar = (users: User[]) => {\n    const result = [];\n    for (const user of users) {\n        result.push({\n            ...user,\n            // get the year, e.g. '2003'\n            registered: user.registered.slice(6),\n            // e.g. 'a.smith'\n            shortName: `${user.firstName[0].toLowerCase()}.${user.lastName.toLowerCase()}`,\n        });\n    }\n    return result;\n};\n\nconst sidebarUsers = usersToSidebar(users);\nconst adminUsers = usersToAdmin(users);\n\nconsole.log({sidebarUsers, adminUsers});\n```\n\n```json5\n{\n  sidebarUsers: [\n    {\n      firstName: 'Barbara',\n      lastName: 'Selling',\n      registered: '2017',\n      shortName: 'b.selling'\n    },\n    {\n      firstName: 'John',\n      lastName: 'Smith',\n      registered: '2019',\n      shortName: 'j.smith'\n    },\n    {\n      firstName: 'Frank',\n      lastName: 'Helmsworth',\n      registered: '2011',\n      shortName: 'f.helmsworth'\n    },\n    {\n      firstName: 'Anna',\n      lastName: 'Freeman',\n      registered: '2003',\n      shortName: 'a.freeman'\n    },\n    {\n      firstName: 'Damian',\n      lastName: 'Sipes',\n      registered: '2001',\n      shortName: 'd.sipes'\n    },\n    {\n      firstName: 'Mara',\n      lastName: 'Homenick',\n      registered: '2007',\n      shortName: 'm.homenick'\n    }\n  ],\n  adminUsers: [\n    {\n      firstName: 'Barbara',\n      lastName: 'Selling',\n      registered: 'Tuesday, 3 January 2017',\n      initials: 'BS'\n    },\n    {\n      firstName: 'John',\n      lastName: 'Smith',\n      registered: 'Tuesday, 24 December 2019',\n      initials: 'JS'\n    },\n    {\n      firstName: 'Frank',\n      lastName: 'Helmsworth',\n      registered: 'Wednesday, 11 May 2011',\n      initials: 'FH'\n    },\n    {\n      firstName: 'Anna',\n      lastName: 'Freeman',\n      registered: 'Wednesday, 9 July 2003',\n      initials: 'AF'\n    },\n    {\n      firstName: 'Damian',\n      lastName: 'Sipes',\n      registered: 'Wednesday, 12 December 2001',\n      initials: 'DS'\n    },\n    {\n      firstName: 'Mara',\n      lastName: 'Homenick',\n      registered: 'Tuesday, 14 August 2007',\n      initials: 'MH'\n    }\n  ]\n}\n```\n\nGorgous. And the original data is untouched:\n\n```typescript\nconsole.log(users);\n```\n\n```json5\n[\n  {\n    firstName: 'Barbara',\n    lastName: 'Selling',\n    registered: '01.03.2017'\n  },\n  { firstName: 'John', lastName: 'Smith', registered: '12.24.2019' },\n  {\n    firstName: 'Frank',\n    lastName: 'Helmsworth',\n    registered: '05.11.2011'\n  },\n  { firstName: 'Anna', lastName: 'Freeman', registered: '07.09.2003' },\n  { firstName: 'Damian', lastName: 'Sipes', registered: '12.12.2001' },\n  { firstName: 'Mara', lastName: 'Homenick', registered: '08.14.2007' }\n]\n```\n\nOur functions are now practically pure (not _technically_ pure, but pure for\nall we care about right now). We can run them in any order, repeatedly. They\nwill return the same values every time.\n\nWe can also fix the type issue we talked about: Instead of stuffing fields into\nthe `User` type, we can make our new models _explicit_ by defining separate\ntypes for them:\n\n```typescript\ntype AdminUser = User & {\n    initials: string;\n};\n\ntype SidebarUser = User & {\n    shortName: string;\n};\n```\n\nAnd adding them to our function signatures:\n\n```git\n-const usersToAdmin = (users: User[]) => {\n+const usersToAdmin = (users: User[]): AdminUser[] => {\n\n-const usersToSidebar = (users: User[]) => {\n+const usersToSidebar = (users: User[]): SidebarUser[] => {\n```\n\nWhile there is still lots of opportunity for refactoring here -- which we will\nexplore in the very next chapter -- we can be happy with the progress we've\nmade so far.\n\n## Next Up\n\nIn the next chapter, we will remove some redundancy from our functions by\nexploring the idea of higher order functions. We will also start using the\n`fp-ts` toolkit, specifically its `Array` module.\n"),n=e.contents,t=e.data;return console.log(t),r(a.Fragment,null,r("h1",null,"A Workers guide to static functional programming in TypeScript"),r("main",null,n))}}},[["/EDR",1,2,5,0,6]]]);